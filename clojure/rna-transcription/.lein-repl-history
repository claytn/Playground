("C" {"C" 5})
(:c {:c 5})
(get "C" {"C" 5})
(get {"C" 5} "C")
(load-file "src/rna_transcription.clj")
(to-rna "GCTA")
(rna-transcription/to-rna "GCTA")
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTA")
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTA")
(rna-transcription/append-nucleotide "" "C")
(rna-transcription/append-nucleotide "G" "C")
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTA")
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTA")
(rna-transcription/rna->dna "G")
(rna-transcription/rna->dna "T")
(rna-transcription/rna->dna "f")
(reduce rna-transcription/append-nucleotide "" "GT")
(reduce rna-transcription/append-nucleotide "GT")
(reduce rna-transcription/append-nucleotide "" "GT")
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTAA")
(rna-transcription/rna->dna "G")
(rna-transcription/rna->dna "\G")
(rna-transcription/rna->dna \G)
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTAA")
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "GCTAA")
(re-matches #"[GTCA]" "XTGA")
(re-matches #"[GTCA]" "TGA")
(re-matches #"GTCA" "TGA")
(re-matches #"[G|T|C|A]" "TGA")
(re-matches #"GTCA" "TGA")
(re-matches #"GTCA" "GTCA")
(re-matches #"GTCA" "GTCAA")
(re-matches #"[GTCA]" "GTCAA")
(re-matches #"[G|TCA]" "GTCAA")
(re-matches #"[G|T]" "G")
(re-matches #"[GTCA]" "G")
(re-matches #"[GTCA]" "K")
(re-matches #"[GTCA]" \K)
(load-file "src/rna_transcription.clj")
(rna-transcription/to-rna "WOOF")
(clojure.string/replace "GCTA" "T" "U")
(clojure.string/replace "C" "T" "U")
(defn to-rna [dna-strand]
  (str/replace dna-strand "T" "U"))
(time (clojure.string/join (map identity "hello")))
(time (apply str (map identity "hello")))
(time (clojure.string/join (map identity "hello")))
(def long-string (clojure.join (take 300 (repeat "w"))))
(def long-string (clojure.string/join (take 300 (repeat "w"))))
long-string
(time (clojure.string/join (map identity long-string)))
(time (apply str (map identity long-string)))
(time (clojure.string/join (map identity long-string)))
(time (apply str (map identity long-string)))
