(reduce str "hello")
(foldr str "hello")
(foldl str "hello")
(reduce cons "hello")
(fold cons "hello")
(reduce cons '() '(1 2 3 4))
(cons 1 '(2))
(reduce cons '() '(1 2 3 4))
(reduce (flip cons) '() '(1 2 3 4))
(require '[clojure.core.reducers :as r])
(r/fold str "hello")
(let [[first rest] "cat"] first)
(let [[first rest] "cat"] rest)
(let [[first & rest] "cat"] rest)
'(\c \a \t)
(= '(\c \a \t) "cat")
(defn flip [f] (fn [y x] (f x y)))
(reduce (flip cons) '() '(1 2 3 4))
(cons 1 '(2))
(reduce str "" "hello")
(reduce (flip str) "" "hello")
(str "" "h")
(str "h" "")
(str "e" "h")
(reduce (flip str) "hello")
(defn thistest [n] "ident func" n)
(thistest 5)
(defn thistest2 "ident func" [n]  n)
(thistest2 5)
(doc thistest2)
(doc thistest)
(seq "woof")
(str (seq "woof"))
'(\w \o \o \f)
